#+OPTIONS: toc:nil num:nil
#+STARTUP: showall indent
#+STARTUP: hidestars
#+BEGIN_EXPORT html
---
layout: blogpost
title: Introduction to Ansible
tags: cli devops automation
---
#+END_EXPORT

More automation!

# TODO: mention that I put off looking into Ansible for the longest time, because I underestimated how powerful it is. 

# TODO: mention that we will focus on the complete basics to get you started, and that there are several features we won't be able to cover. Hopefully you will be aqainted with a few terms, and get some links that will help you explore these features further. Maybe also future articles if I feel like I can explain something better. Further reading at the end? Jeff Geerlings video series and book. 
# TODO: mention that I link to blog articles or similar if I feel like it is more straight to the point and explains better than the official documentation.

# TODO: mention the 3 things Ansible can be used for and which tools it can replace:
Ansible is often described as a configuration management tool, but solves several problems:
- Ad-hoc task execution, usually done by logging into each server using SSH and executing tasks.
- Deployments and configuration management, as mentioned. Deploying server software and configuring it. I usually put all of these in the configuration management umbrella when done together like with Ansible. Used to be solved with tools like Puppet, Chef and Fabric.
- Infrastructure as code (IaC), thanks to some plugins (e.g, [[https://www.linode.com/docs/guides/deploy-linodes-using-ansible/][Linode]] and [[https://docs.ansible.com/ansible/latest/collections/azure/azcollection/azure_rm_resource_module.html][Azure]]). I think other tools like [[https://www.terraform.io/][Terraform]] is best to solve these issues, due to it handling the state for you. As we will come back to later, Ansible is more imperative than declarative. You describe steps it should take, and Ansible make sure those steps are done. No information about the current state (beyond the changes you have executed) is saved on the target computers. Terraform on the other hand is declarative; you describe a certain state you want the infrastructure to be in, and Terraform makes sure it is in that state (deleting resources you remove). It does not solve all the same problems as Ansible though, only the infrastructure part, so the tools can work wonders together! :)

  
So instead of using different tools to solve these problems, we can use Ansible for all of them (at least the first two!). Pretty neat!


# TODO: assumptions like: assume you have a vm or environment to run these against. Can be Docker containers, Virtual machines (what i use), phycsical machines etc.

# TODO: is a heading like this necessary?
* What can Ansible be used for?


# TODO: mention different things we can use Ansible for?
#   - setting up each machine in an infrastructure. Sometimes the cloud provider doesn't have exactly what we want, and we want to set up a VM
#   - Some organizations may not be able to use public clouds, and may need to set up things locally by running different commands. Ansible is great for this.
#   - Your own local setup. Each time you have to reinstall your OS, it is a hazzle to set up everything. There is always some tool you forget at the beginning. What about setting up an Ansible playbook for it?
#   - Building containers for Docker etc.
#   - setting up Raspberry Pis (or other small computers) to do what you want (kubernetes clusters, dashboard, other setups of various tools)
#   - Ad-hoc running commands on all the computers you are handling (to check available ram etc.).
#   - writing Kubernetes operators using the SDK (link pl0x) https://sdk.operatorframework.io/docs/building-operators/ansible/quickstart/
# -

# TODO: depressing.. will public clouds just consume everything? Maybe a "fun" research topic?

# docker images (useful or not?):
# https://blog.tomecek.net/post/building-containers-with-buildah-and-ansible/


# TODO: examples of different tasks in each category?
* Basics of Ansible
# TODO: the basics concepts like inventories etc.

# TODO: why ansible? No daemon etc. 
# TODO: mentioned the stateless parts. No extra state files, daemons or other things are needed on the machines. Just Python (3). Puppet, Chef etc. needs software on the servers to run... 

# TODO: mention idempotency here...?

# TODO: jinja2 mentioned somewhere?
#       link to some playbooks by Jeff that uses more advanced jinja features somewhere?

* Ad-hoc tasks execution
# TODO: should modules be explained here? or maybe in the previous section

# TODO: what examples to do?
#    - the classic one: check free ram
#    - installing a package
#    - 

* Configuration management - Playbooks
# TODO: mention why playbooks? Avoiding unicorn servers? 

# TODO: some intro on playbooks describing the general structure

# TODO: parts of a play file:
#        - plays
#        - tasks
#       

# TODO: show the basic structure of a playbook file. 


# TODO: introduce modules. have some examples with useful ones? or just link to some? lineinfile, template, slurp, file, package (apt and yum as well), 



# TODO: mention that some examples are constructed, others can be found in my repo
** Example: Installing Emacs and setting up my configuration

# TODO: should we add the debian part? 
#+BEGIN_SRC yaml
  ---
  - hosts: all
    become: true

    tasks:
      - name: Make sure Emacs is installed
        package: 
          name:
            - emacs
            - git
          state: present

      - name: Download Emacs  config
        become: false
        git:
          repo: https://github.com/themkat/.emacs.d.git
          dest: ~/.emacs.d
#+END_SRC
(this assumes that the user who we have configured in the inventory file is the user who will use the emacs config)

** Example: FTP server

#+BEGIN_SRC yaml
  ---
  - hosts: all
    become: true

    vars:
      username: ftpuser

    pre_tasks:
      - name: Update package archives (Debian-based)
        apt:
          update_cache: true
          cache_valid_time: 7200
        when: ansible_os_family == "Debian"
  
    tasks:
      - name: Set up user we want to use for FTP access
        user:
          name: "{{ username }}"
          password: "{{ username | password_hash('sha512', 'saltval') }}"
          state: present
        
      - import_tasks: ftp_server_tasks.yml
#+END_SRC
# TODO: find a good link to a basic no nonsense introduction to using ansible vault
(a better way to handle the password would be to use something like Ansible Vault)

  The playbook we have 
#+BEGIN_SRC yaml
  ---
  - name: Install vsftpd
    package: name=vsftpd state=present

  - name: Make sure bftpd is started and active at startup
    service: name=vsftpd state=started enabled=true
#+END_SRC

# TODO: example with import_playbook? or links to documentation?
# TODO: blocks?

# TODO: explain the gather facts stuff


# TODO: example with environment variables? or is that something that is covered okay by reading about it? 


# TODO: should collections and roles be explained quickly? Maybe with a link to reading more. Or can creating a plugin for something be a future article?
** Roles and collections
# TODO: should I mention that i'm bad at using them, and focus mostly on the features above?

Roles, collection of tasks we can import. Or is that too oversimplifiged.

Collections, plugins, roles, similar. As in the name: collection. How to explain that in a good way?


** Inventory plugins
Maybe you manage a lot of computers, create new ones quickly, and find it tedious to update your inventory file? It grows big too! Do I really need to write all my IPs/hostnames in a file? No! There are actually [[https://docs.ansible.com/ansible/latest/collections/community/general/index.html#inventory-plugins][plugins that can help you dynamically fetch the inventory]] based on certain parameters. Also, [[https://docs.ansible.com/ansible/latest/collections/amazon/aws/aws_ec2_inventory.html][AWS EC2 plugin]], [[https://docs.ansible.com/ansible/latest/collections/azure/azcollection/azure_rm_inventory.html][Azure plugin]], and many more exists, even if you sometimes have to use [[https://docs.ansible.com/ansible/latest/galaxy/user_guide.html][ansible-galaxy to install them]]. Maybe you have tagged your virtual machine or something similar to identify them? Then use those specific tags to put them into host groups, and you are all set!


** Testing playbooks?
# TODO: mention molecule and testing somewhere? linting with various tools etc.?
There are indeed tools you can use to test your playbooks, and to work in a more test driven approach. My approach so far has been the following:
1. Use a virtual machine to define the basic setup. Here I use yamllint and ansible-lint to fix basic best practices and possible issues (ansible-lint is quite clever here!).
2. Use Molecule to write basic tests, fix idempotency issues missed earlier, make sure that setup works possibly more bare bones setups than the VMs etc.

Testing playbooks is a topic in itself, so to not clutter up the entire article we will save that for a possible later article :)

* Still relevant in a cloud native world?
# Last: Is Ansible still relevant in a Kubernetes, cloud native world? yes. Short discussion, link to Geerlingguys excellent summary article. making containers etc.
#       any other points to mention? 

* Further reading and resources

# Jeff Geerlings Ansible 101 video series (covers almost everything you would like to know):
# https://www.youtube.com/playlist?list=PL2_OBreMn7FqZkvMYt6ATmgC0KAGGJNAN

# geerlings book Ansible for Devops:
# https://www.ansiblefordevops.com/


