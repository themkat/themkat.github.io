#+OPTIONS: toc:nil num:nil
#+STARTUP: showall indent
#+STARTUP: hidestars
#+BEGIN_EXPORT html
---
layout: blogpost
title: Which programming language should you learn in 2021?
---
#+END_EXPORT

# TODO: mention one widely used useful language. One fun to learn to do things in a different ways. 

New year, new programming languages to learn! 

languages that I know that I would recommend that others look into.

# TODO: mention that there are MANY langauges I will not mention here. This is not meant to be my favourite languages of all time, but a mix of fun and useful languages to learn.

# TODO. maybe have max 3 categories or choices? 

# TODO: mention: remember, the most important part of learning new programming languages (at least in different language families) isn't to memorize syntax, but to learn different ways of thinking. Solving problems in different ways can be a lot of fun :D 


** Kotlin - The all-rounder


# TODO: mention the part that Kotlin is embraced by many companies now. If you look for a language that will give you some advantages in the job market in the coming years, Kotlin might be a good choice. 

# TODO: should I maybe link to other websites to support my view here? 

# TODO: probably also mention that you should never pick out a language just for the possibility to get a job. Think about what you are passionate about learning first. Remember that if you are well-versed in many different ways of thinking, learning the syntax of a new language is not really that hard. 


** Crystal - a gem for the ???
# TOdO: is there another language I could maybe recommend that is non-standard? Or is Crystal a good choice here? 


** Prolog - the logical choice
Learning to solve problems in different ways, is in my view one of the most important parts of being a good programmer. When we learn to solve a problem in a completely different ways, it improves our understanding of the problem, and possibly also related problems. This is where Prolog comes in. If you are not familiar with logic programming, the term might just sound like what we are used to. Isn't all programming logical? Prolog is in the family of logic programming, where we think of problems in a different way. Instead of describing a recipe for steps we want to do, we describe rules of how our "logical world" work, and query the rules. In other words, Prolog is declarative, we specify what we want not the steps to accomplish it. 

# TODO: some minor code examples? 

# mention that programmer passports articles and tasks are a good place to start:
# https://grox.io/language/prolog/course
# also just doing tasks on exercism can be a good way to play with the languages. 

# Recommend SWI prolog?


** "I know all the above!!!"
If you know all the languages I have listed above, then you will have to find something new. Maybe Common Lisp will interest you? Or Haskell? Maybe scripting with Rexx is more your thing? Several of these might be topics for future blog posts. What do I want to look into in the near future? My plan as of now is to look more into Pony (ponylang), While the language has a weird name, it also have some interesting properties relating to concurrency. One of the main goals of the language is to have compile-time protection against deadlocks and other issues relating to concurrency. Maybe I will feel inspired to write an article about it in the future?


What would you recommend others learn this year? Any languages you have learned that really expanded your mind? Feel free to share in the comments below! 
